module example-newco-acl {

  yang-version 1.1;

  namespace "urn:newco:params:xml:ns:yang:example-newco-acl";

  prefix example-newco-acl;

  import ietf-access-control-list {
    prefix "ietf-acl";
  }

  import ietf-interfaces {
    prefix "ietf-if";
  }

  import ietf-yang-types {
    prefix yang;
  }

  organization
    "Newco model group.";

  contact
    "abc@newco.com";
  description
    "This YANG module augments IETF ACL Yang.";

  revision YYYY-MM-DD {
    description
      "Creating NewCo proprietary extensions to ietf-acl model";
    
    reference
      "RFC XXXX: Network Access Control List (ACL)
       YANG Data  Model";
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:aces/ietf-acl:ace/" +
          "ietf-acl:matches" {
    description "Newco proprietary simple filter matches";
    choice protocol-payload-choice {
      description "Newo proprietary payload match condition";
      list protocol-payload {
        key value-keyword;
        ordered-by user;
        description "Match protocol payload";
        uses match-simple-payload-protocol-value;
      }
    }

    choice metadata {
      description "Newco proprietary interface match condition";
      list interface-name {
        key input-interface;
        ordered-by user;
        description "Match interface name";
        uses metadata;
      }
    }
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:aces/ietf-acl:ace/" +
          "ietf-acl:actions" {
    description "Newco proprietary simple filter actions";
    choice action {
      description "";
      case count {
        description "Count the packet in the named counter";
        leaf count {
          type string;
          description "";
        }
      }
      case policer {
        description "Name of policer to use to rate-limit traffic";
        leaf policer {
          type string;
          description "";
        }
      }
      case hiearchical-policer {
        description "Name of hierarchical policer to use to
                     rate-limit traffic";
        leaf hierarchitacl-policer {
          type string;
          description "";
        }
      }
    }
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl" {
    description "Newco proprietary default action";
    container default-actions {
      description
        "Actions that occur if no access-list entry is matched.";
      leaf deny {
        type empty;
        description "";
      }
    }
  }

  grouping metadata {
    description
      "Fields associated with a packet which are not in
       the header.";
    leaf input-interface {
      type ietf-if:interface-ref {
        require-instance false;
      }
      description
        "Packet was received on this interface";
    }
  }

  grouping match-simple-payload-protocol-value {
    description "Newco proprietary payload";
    leaf value-keyword {
      type enumeration {
        enum icmp {
          description "Internet Control Message Protocol";
        }
        enum icmp6 {
          description "Internet Control Message Protocol Version 6";
        }
        enum range {
          description "Range of values";
        }
      }
      description "(null)";
    }
  }

  augment "/ietf-if:interfaces/ietf-if:interface" {
    description "Apply ACL to interfaces";
    container acl {
      description "ACL related properties.";
      leaf acl-name {
        type ietf-acl:acl-ref;
        description "Access Control List name.";
      }
      leaf match-counter {
        type yang:counter64;
        config false;

        description
          "Total match count for Access Control
           List on this interface";
      }
      choice direction {
        description "Applying ACL in which traffic direction";
        leaf in {
          type empty;
          description "Inbound traffic";
        }
        leaf out {
          type empty;
          description "Outbound traffic";
        }
      }
    }
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:aces/ietf-acl:ace/" +
          "ietf-acl:ace-oper-data" {
    description
      "This is an example on how to apply acl to a target to collect
       operational data";
    container targets {
      description "To which object is the ACL attached to";
      choice interface {
        description
          "Access Control List was attached to this interface";
        leaf-list interface-name{
          type ietf-if:interface-ref {
            require-instance true;
          }
          description "Attached to this interface name";
        }
      }
    }
  }
}