<?xml version="1.0" encoding="US-ASCII"?>
<!-- This is built from a template for a generic Internet Draft. Suggestions for
     improvement welcome - write to Brian Carpenter, brian.e.carpenter @ gmail.com -->
<!-- This can be converted using the Web service at http://xml.resource.org/experimental.html
     (which supports the latest, sometimes undocumented and under-tested, features.) -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<!-- You want a table of contents -->
<?rfc symrefs="yes"?>
<!-- Use symbolic labels for references -->
<?rfc sortrefs="yes"?>
<!-- This sorts the references -->
<?rfc iprnotified="no" ?>
<!-- Change to "yes" if someone has disclosed IPR for the draft -->
<?rfc compact="yes"?>
<!-- This defines the specific filename and version number of your draft (and inserts the appropriate IETF boilerplate -->
<rfc category="std" docName="draft-ietf-netmod-acl-model-11" ipr="trust200902">
  <front>
    <title abbrev="ACL YANG model">Network Access Control List (ACL) YANG Data
    Model</title>

    <author fullname="Dean Bogdanovic" initials="D." surname="Bogdanovic">
      <organization>Volta Networks</organization>

      <address>
        <email>ivandean@gmail.com</email>
      </address>
    </author>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization>Cisco Systems, Inc</organization>

      <address>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>

    <author fullname="Lisa Huang" initials="L." surname="Huang">
      <organization>General Electric</organization>

      <address>
        <email>lyihuang16@gmail.com</email>
      </address>
    </author>

    <author fullname="Sonal Agarwal" initials="S." surname="Agarwal">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <email>agarwaso@cisco.com</email>
      </address>
    </author>

    <date day="05" month="June" year="2017"/>

    <area>Operations and Management Area</area>

    <workgroup>NETMOD WG</workgroup>

    <abstract>
      <t>This document describes a data model of Access Control List (ACL)
      basic building blocks.</t>

      <t>Editorial Note (To be removed by RFC Editor)</t>

      <t>This draft contains many placeholder values that need to be replaced
      with finalized values at the time of publication. This note summarizes
      all of the substitutions that are needed. Please note that no other RFC
      Editor instructions are specified anywhere else in this document.</t>

      <t>Artwork in this document contains shorthand references to drafts in
      progress. Please apply the following replacements</t>

      <t><list style="symbols">
          <t>"XXXX" --&gt; the assigned RFC value for this draft.</t>

          <t>Revision date in model (Oct 12, 2016) needs to get updated with
          the date the draft gets approved. The date also needs to get
          reflected on the line with &lt;CODE BEGINS&gt;.</t>
        </list></t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>Access Control List (ACL) is one of the basic elements to configure
      device forwarding behavior. It is used in many networking concepts such
      as Policy Based Routing, Firewalls etc.</t>

      <t>An ACL is an ordered set of rules that is used to filter traffic on a
      networking device. Each rule is represented by an Access Control Entry
      (ACE).</t>

      <t>Each ACE has a group of match criteria and a group of action
      criteria.</t>

      <t>The match criteria consist of a tuple of packet header match criteria
      and can have metadata match criteria as well.</t>

      <t><list style="symbols">
          <t>Packet header matches apply to fields visible in the packet such
          as address or class of service or port numbers.</t>

          <t>In case vendor suppors it, metadata matches apply to fields
          associated with the packet but not in the packet header such as
          input interface or overall packet length</t>
        </list></t>

      <t>The actions specify what to do with the packet when the matching
      criteria is met. These actions are any operations that would apply to
      the packet, such as counting, policing, or simply forwarding.The list of
      potential actions is endless depending on the innovations of the
      networked devices.</t>

      <t>Access Control List is also widely knowns as ACL (pronounce as [ak-uh
      l]) or Access List. In this document, Access Control List, ACL and
      Access List are interchangeable.</t>

      <t>The matching of filters and actions in an ACE/ACL are triggered only
      after application/attachment of the ACL to an interface, VRF, vty/tty
      session, QoS policy, routing protocols amongst various other config
      attachment points. Once attached, it is used for filtering traffic using
      the match cirteria in the ACE's and taking appropriate action(s) that
      have been configured against that ACE. In order to apply an ACL to any
      attachment point, vendors would have to augment the ACL YANG model.</t>

      <section title="Definitions and Acronyms">
        <t>ACE: Access Control Entry</t>

        <t>ACL: Access Control List</t>

        <t>DSCP: Differentiated Services Code Point</t>

        <t>ICMP: Internet Control Message Protocol</t>

        <t>IP: Internet Protocol</t>

        <t>IPv4: Internet Protocol version 4</t>

        <t>IPv6: Internet Protocol version 6</t>

        <t>MAC: Media Access Control</t>

        <t>TCP: Transmission Control Protocol</t>
      </section>

      <!-- definitions -->
    </section>

    <!-- intro -->

    <section anchor="problem" title="Problem Statement">
      <t>This document defines a <xref target="RFC6020">YANG</xref> data model
      for the configuration of ACLs. It is very important that model can be
      easily used by applications/attachments.</t>

      <t>ACL implementations in every device may vary greatly in terms of the
      filter constructs and actions that they support. Therefore this draft
      proposes a model that can be augmented by standard extensions and vendor
      proprietary models.</t>

      <t>DISCUSS: Should this draft include route-policy definition as defined
      in draft-ietf-rtgwg-policy-model?</t>
    </section>

    <!-- problem -->

    <section anchor="design" title="Understanding ACL's Filters and Actions">
      <t>Although different vendors have different ACL data models, there is a
      common understanding of what access control list (ACL) is. A network
      system usually have a list of ACLs, and each ACL contains an ordered
      list of rules, also known as access list entries &ndash; ACEs. Each ACE
      has a group of match criteria and a group of action criteria. The match
      criteria consist of packet header matching. It as also possible for ACE
      to match on metadata, if supported by the vendor. Packet header matching
      applies to fields visible in the packet such as address or class of
      service or port numbers. Metadata matching applies to fields associated
      with the packet, but not in the packet header such as input interface,
      packet length, or source or destination prefix length. The actions can
      be any sort of operation from logging to rate limiting or dropping to
      simply forwarding. Actions on the first matching ACE are applied with no
      processing of subsequent ACEs. The model also includes a container to
      hold overall operational state for each ACL and operational state for
      each ACE. One ACL can be applied to multiple targets within the device,
      such as interfaces of a networked device, applications or features
      running in the device, etc. When applied to interfaces of a networked
      device, the ACL is applied in a direction which indicates if it should
      be applied to packet entering (input) or leaving the device (output). An
      example in the appendix shows how to express it in YANG model.</t>

      <t>This draft tries to address the commonalities between all vendors and
      create a common model, which can be augmented with proprietary models.
      The base model is very simple and with this design we hope to achieve
      needed flexibility for each vendor to extend the base model.</t>

      <section anchor="aclmodules" title="ACL Modules">
        <t>There are two YANG modules in the model. The first module,
        "ietf-access-control-list", defines generic ACL aspects which are
        common to all ACLs regardless of their type or vendor. In effect, the
        module can be viewed as providing a generic ACL "superclass". It
        imports the second module, "ietf-packet-fields". The match container
        in "ietf-access-control-list" uses groupings in "ietf-packet-fields".
        If there is a need to define new "matches" choice, such as <xref
        target="RFC5101">IPFIX</xref>, the container "matches" can be
        augmented.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/ietf-access-control-list@YYYY-MM-DD-tree.txt)
   ]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="yangmodel" title="ACL YANG Models">
      <section anchor="ietfacl" title="IETF Access Control List module">
        <t>"ietf-access-control-list" is the standard top level module for
        access lists. The "access-lists" container stores a list of "acl".
        Each "acl" has information identifying the access list by a
        name("acl-name") and a list("access-list-entries") of rules associated
        with the "acl-name". Each of the entries in the
        list("access-list-entries"), indexed by the string "rule-name", has
        containers defining "matches" and "actions". The "matches" define
        criteria used to identify patterns in "ietf-packet-fields". The
        "actions" define behavior to undertake once a "match" has been
        identified.</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-access-control-list@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-access-control-list@YYYY-MM-DD.yang)

<CODE ENDS>
        ]]></artwork>
        </figure>
      </section>

      <!--ietfacl -->

      <section anchor="pktheaders" title="IETF Packet Fields module">
        <t>The packet fields module defines the necessary groups for matching
        on fields in the packet including ethernet, ipv4, ipv6, and transport
        layer fields. Since the number of match criteria is very large, the
        base draft does not include these directly but references them by
        "uses" to keep the base module simple. In case more match conditions
        are needed, those can be added by augmenting choices within container
        "matches" in ietf-access-control-list.yang model.</t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-packet-fields@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(../src/yang/ietf-packet-fields@YYYY-MM-DD.yang)

<CODE ENDS>
          ]]></artwork>
        </figure>
      </section>

      <!--pktheaders-->

      <section anchor="example" title="An ACL Example">
        <t>Requirement: Deny tcp traffic from 10.10.10.1/24, destined to
        11.11.11.1/24.</t>

        <t>Here is the acl configuration xml for this Access Control List:</t>

        <figure>
          <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
  <data xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <access-lists xmlns="urn:ietf:params:xml:ns:yang:ietf-access-control-list">
      <acl>
        <acl-name>sample-ipv4-acl</acl-name>
        <acl-type>ipv4</acl-type>
        <access-list-entries>
          <ace>
            <rule-name>rule1</rule-name>
            <matches>
              <source-ipv4-network>
                10.10.10.1/24
              </source-ipv4-network>
              <destination-ipv4-network>
                11.11.11.1/24
              </destination-ipv4-network>
            </matches>
            <actions>
              <deny />
            </actions>
            <protocol>
             tcp
            </protocol>
          </ace>
        </access-list-entries>
      </acl>
    </access-lists>
  </data>
     ]]></artwork>
        </figure>

        <t>The acl and aces can be described in CLI as the following:</t>

        <figure>
          <artwork><![CDATA[
      access-list ipv4 sample-ipv4-acl
      deny tcp 10.10.10.1/24 11.11.11.1/24
    ]]></artwork>
        </figure>
      </section>

      <section anchor="portrange" title="Port Range Usage Example">
        <t>When a lower-port and an upper-port are both present, it represents
        a range between lower-port and upper-port with both the lower-port and
        upper-port are included. When only a lower-port presents, it
        represents a single port.</t>

        <t>With the follow XML snippet:</t>

        <figure>
          <artwork><![CDATA[
     <source-port-range>
       <lower-port>16384</lower-port>
       <upper-port>16387</upper-port>
     </source-port-range>

      ]]></artwork>
        </figure>

        <t>This represents source ports 16384,16385, 16386, and 16387.</t>

        <t>With the follow XML snippet:</t>

        <figure>
          <artwork><![CDATA[
      <source-port-range>
        <lower-port>16384</lower-port>
        <upper-port>65535</upper-port>
      </source-port-range>

    ]]></artwork>
        </figure>

        <t>This represents source ports greater than/equal to 16384 and less
        than equal to 65535.</t>

        <t>With the follow XML snippet:</t>

        <figure>
          <artwork><![CDATA[
      <source-port-range>
        <lower-port>21</lower-port>
      </source-port-range>

    ]]></artwork>
        </figure>

        <t>This represents port 21.</t>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>The YANG module defined in this memo is designed to be accessed via
      the <xref target="RFC6241">NETCONF </xref>. The lowest NETCONF layer is
      the secure transport layer and the mandatory-to-implement secure
      transport is <xref target="RFC6242">SSH</xref>. The NETCONF Access
      Control Model ( <xref target="RFC6536">NACM</xref>) provides the means
      to restrict access for particular NETCONF users to a pre-configured
      subset of all available NETCONF protocol operations and content.</t>

      <t>There are a number of data nodes defined in the YANG module which are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., &lt;edit-config&gt;) to
      these data nodes without proper protection can have a negative effect on
      network operations.</t>

      <t>These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t>/access-lists/acl/access-list-entries: This list specifies all the
      configured access list entries on the device. Unauthorized write access
      to this list can allow intruders to access and control the system.
      Unauthorized read access to this list can allow intruders to spoof
      packets with authorized addresses thereby compromising the system.</t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>This document registers a URI in the <xref target="RFC3688">IETF XML
      registry </xref>. Following the format in RFC 3688, the following
      registration is requested to be made:</t>

      <t>URI: urn:ietf:params:xml:ns:yang:ietf-access-control-list</t>

      <t>URI: urn:ietf:params:xml:ns:yang:ietf-packet-fields</t>

      <t>Registrant Contact: The IESG.</t>

      <t>XML: N/A, the requested URI is an XML namespace.</t>

      <t>This document registers a YANG module in the YANG Module Names
      registry [RFC6020].</t>

      <t>name: ietf-access-control-list namespace:
      urn:ietf:params:xml:ns:yang:ietf-access-control-list prefix: ietf-acl
      reference: RFC XXXX</t>

      <t>name: ietf-packet-fields namespace:
      urn:ietf:params:xml:ns:yang:ietf-packet-fields prefix:
      ietf-packet-fields reference: RFC XXXX</t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Alex Clemm, Andy Bierman and Lisa Huang started it by sketching out
      an initial IETF draft in several past IETF meetings. That draft included
      an ACL YANG model structure and a rich set of match filters, and
      acknowledged contributions by Louis Fourie, Dana Blair, Tula Kraiser,
      Patrick Gili, George Serpa, Martin Bjorklund, Kent Watsen, and Phil
      Shafer. Many people have reviewed the various earlier drafts that made
      the draft went into IETF charter.</t>

      <t>Dean Bogdanovic, Kiran Agrahara Sreenivasa, Lisa Huang, and Dana
      Blair each evaluated the YANG model in previous draft separately and
      then work together, to created a new ACL draft that can be supported by
      different vendors. The new draft removes vendor specific features, and
      gives examples to allow vendors to extend in their own proprietary ACL.
      The earlier draft was superseded with the new one that received more
      participation from many vendors.</t>

      <t>Authors would like to thank Jason Sterne, Lada Lhotka, Juergen
      Schoenwalder for their review of and suggestions to the draft.</t>
    </section>

    <!---->
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.6536'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.5101'?>
    </references>

    <section anchor="app-additional" title="Extending ACL model examples">
      <section anchor="routeacl"
               title="Example of extending existing model for route filtering">
        <t>With proposed modular design, it is easy to extend the model with
        other features. Those features can be standard features, like route
        filters. Route filters match on specific IP addresses or ranges of
        prefixes. Much like ACLs, they include some match criteria and
        corresponding match action(s). For that reason, it is very simple to
        extend existing ACL model with route filtering. The combination of a
        route prefix and prefix length along with the type of match determines
        how route filters are evaluated against incoming routes. Different
        vendors have different match types and in this model we are using only
        ones that are common across all vendors participating in this draft.
        As in this example, the base ACL model can be extended with company
        proprietary extensions, described in the next section.</t>

        <figure>
          <artwork><![CDATA[
module: example-ext-route-filter
augment /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/ietf-acl:ace/ietf-acl:matches:
   +--rw (route-prefix)?
      +--:(range)
         +--rw (ipv4-range)?
         |  +--:(v4-lower-bound)
         |  |  +--rw v4-lower-bound?   inet:ipv4-prefix
         |  +--:(v4-upper-bound)
         |     +--rw v4-upper-bound?   inet:ipv4-prefix
         +--rw (ipv6-range)?
            +--:(v6-lower-bound)
            |  +--rw v6-lower-bound?   inet:ipv6-prefix
            +--:(v6-upper-bound)
               +--rw v6-upper-bound?   inet:ipv6-prefix	  
	  ]]></artwork>
        </figure>

        <figure>
          <artwork><![CDATA[
file "example-ext-route-filter@2016-10-12.yang"
module example-ext-route-filter {
  namespace "urn:ietf:params:xml:ns:yang:example-ext-route-filter";
  prefix example-ext-route-filter;
  import ietf-inet-types {
    prefix "inet";
  }
  import ietf-access-control-list {
    prefix "ietf-acl";
  }

  organization 
    "Route model group.";

  contact 
    "abc@abc.com";

  description "
    This module describes route filter as a collection of
    match prefixes. When specifying a match prefix, you
    can specify an exact match with a particular route or
    a less precise match. You can configure either a
    common action that applies to the entire list or an
    action associated with each prefix.
    ";
  revision 2016-10-12 {
    description 
      "Creating Route-Filter extension model based on 
      ietf-access-control-list model";
    reference " ";
  }
  augment "/ietf-acl:access-lists/ietf-acl:acl/"
    + "ietf-acl:access-list-entries/ietf-acl:ace/ietf-acl:matches"{
    description "
      This module augments the matches container in the ietf-acl
      module with route filter specific actions
      ";
    choice route-prefix{
      description "Define route filter match criteria";
      case range {
        description 
          "Route falls between the lower prefix/prefix-length 
          and the upperprefix/prefix-length.";
        choice ipv4-range {
          description "Defines the IPv4 prefix range";
          leaf v4-lower-bound {
            type inet:ipv4-prefix;
            description 
              "Defines the lower IPv4 prefix/prefix length";
          }
          leaf v4-upper-bound {
            type inet:ipv4-prefix;
            description 
              "Defines the upper IPv4 prefix/prefix length";
          }
        }
        choice ipv6-range {
          description "Defines the IPv6 prefix/prefix range";
          leaf v6-lower-bound {
            type inet:ipv6-prefix;
            description 
              "Defines the lower IPv6 prefix/prefix length";
          }
          leaf v6-upper-bound {
            type inet:ipv6-prefix;
            description 
              "Defines the upper IPv6 prefix/prefix length";
          }
        }
      }
    }
  }
}

        ]]></artwork>
        </figure>
      </section>

      <!--routeacl-->

      <section anchor="newcoacl" title="A company proprietary module example">
        <t>Access control list typically does not exist in isolation. Instead,
        they are associated with a certain scope in which they are applied,
        for example, an interface of a set of interfaces. How to attach an
        access control list to an interface (or other system artifact) is
        outside the scope of this model, as it depends on the specifics of the
        system model that is being applied. However, in general, the general
        design pattern will involved adding a data node with a reference, or
        set of references, to ACLs that are to be applied to the interface.
        For this purpose, the type definition "access-control-list-ref" can be
        used.</t>

        <t>Module "example-newco-acl" is an example of company proprietary
        model that augments "ietf-acl" module. It shows how to use 'augment'
        with an XPath expression to add additional match criteria, action
        criteria, and default actions when no ACE matches found, as well how
        to attach an Access Control List to an interface. All these are
        company proprietary extensions or system feature extensions.
        "example-newco-acl" is just an example and it is expected from vendors
        to create their own proprietary models.</t>

        <t>The following figure is the tree structure of example-newco-acl. In
        this example,
        /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/
        ietf-acl:ace/ietf-acl:matches are augmented with two new choices,
        protocol-payload-choice and metadata. The protocol-payload-choice uses
        a grouping with an enumeration of all supported protocol values.
        Metadata matches apply to fields associated with the packet but not in
        the packet header such as input interface or overall packet length. In
        other example,
        /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/
        ietf-acl:ace/ietf-acl:actions are augmented with new choice of
        actions.</t>

        <figure>
          <artwork><![CDATA[
module: example-newco-acl
augment /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/ietf-acl:ace/ietf-acl:matches:
   +--rw vlan-tagged?      uint16
   +--rw mpls-unicast?     uint16
   +--rw mpls-multicast?   uint16
   +--rw ipv4?             uint16
   +--rw ipv6?             uint16
augment /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/ietf-acl:ace/ietf-acl:matches:
   +--rw ipv4-ttl?      uint8
   +--rw ipv4-len?      uint16
   +--rw ipv4-ihl?      uint8
   +--rw ipv4-id?       uint16
   +--rw ipv4-flags?    ipv4-flags-type
   +--rw ipv4-offset?   uint16
augment /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/ietf-acl:ace/ietf-acl:matches:
   +--rw (protocol-payload-choice)?
   |  +--:(protocol-payload)
   |     +--rw protocol-payload* [value-keyword]
   |        +--rw value-keyword    enumeration
   +--rw (metadata)?
      +--:(interface-name)
         +--rw interface-name* [input-interface]
            +--rw input-interface    ietf-if:interface-ref
augment /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:access-list-entries/ietf-acl:ace/ietf-acl:actions:
   +--rw (action)?
      +--:(count)
      |  +--rw count?                   string
      +--:(policer)
      |  +--rw policer?                 string
      +--:(hiearchical-policer)
         +--rw hierarchitacl-policer?   string
augment /ietf-acl:access-lists/ietf-acl:acl:
   +--rw default-actions
      +--rw deny?   empty
augment /ietf-if:interfaces/ietf-if:interface:
   +--rw acl
      +--rw acl-name?        ietf-acl:access-control-list-ref
      +--ro match-counter?   yang:counter64
      +--rw (direction)?
         +--:(in)
         |  +--rw in?              empty
         +--:(out)
            +--rw out?             empty
augment /ietf-acl:access-lists/ietf-acl:acl/ietf-acl:acl-oper-data:
   +--ro targets
      +--ro (interface)?
         +--:(interface-name)
            +--ro interface-name*   ietf-if:interface-ref
          ]]></artwork>
        </figure>

        <figure>
          <artwork><![CDATA[
module example-newco-acl {

  yang-version 1.1;

  namespace "urn:newco:params:xml:ns:yang:example-newco-acl";

  prefix example-newco-acl;

  import ietf-access-control-list {
    prefix "ietf-acl";
  }

  import ietf-interfaces {
    prefix "ietf-if";
  }
  
  import ietf-yang-types {
    prefix yang;
  }
  
  organization 
    "Newco model group.";

  contact 
    "abc@newco.com";
  description
    "This YANG module augment IETF ACL Yang.";

  revision 2016-10-12{
    description 
      "Creating NewCo proprietary extensions to ietf-acl model";
    reference
      "RFC XXXX: Network Access Control List (ACL)
      YANG Data  Model";
  }
  
  
  typedef known-ether-type {
    type enumeration {	
      enum "ipv4" {
        value 2048; // 0x0800
        description "Internet Protocol version 4 (IPv4)";
      }
      enum "vlan-tagged" {
        value 33024; // 0x8100
        description 
          "VLAN-tagged frame (IEEE 802.1Q) & Shortest Path 
           Bridging IEEE 802.1aq[4]";
      }
      enum "ipv6" {
        value 34525; // 0x86DD
        description "Internet Protocol Version 6 (IPv6)";
      }
      enum "mpls-unicast" {
        value 34887; // 0x8847
        description "MPLS unicast";
      }
      enum "mpls-multicast" {
        value 34888; // 0x8848
        description "MPLS multicast";
      }
    }
    description "Listing supported Ethertypes";
  }

  typedef ipv4-flags-type {
    type bits {
      bit ipv4-reserved {
        position 0;
        description "reserved bit";
      }
      bit ipv4-DF {
        position 1;
        description "DF bit";
      }
      bit ipv4-MF {
       position 2;
       description "MF bit";
      }
    }
    description "IPv4 flag types";
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:access-list-entries/ietf-acl:ace/" +
          "ietf-acl:matches" {
   when "ietf-acl:access-lists/ietf-acl:acl/" +
        "ietf-acl:acl-type = 'ace-eth'";

   description "additional MAC header matching";

     leaf vlan-tagged {
       type uint16;
       description "Ethernet frame with VLAN tag";
     }

     leaf mpls-unicast {
       type uint16;
       description "Ethernet frame with MPLS unicast payload";
     }

     leaf mpls-multicast {
       type uint16;
       description "Ethernet frame with MPLS multicast payload";
     }

     leaf ipv4 {
       type uint16;
       description "Ethernet frame with IPv4 unicast payload";
     }

     leaf ipv6 {
       type uint16;
       description "Ethernet frame with IPv4 unicast payload";
     }
  }
  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:access-list-entries/ietf-acl:ace/" +
          "ietf-acl:matches" {
   when "ietf-acl:access-lists/ietf-acl:acl/" +
        "ietf-acl:acl-type = 'ipv4-acl'";

   description "additional IP header information";

    leaf ipv4-ttl {
      type uint8;
      description "time to live of a given packet as 
      defined in RFC791";
    }

    leaf ipv4-len {
      type uint16;
      description "total packet length as defined in RFC791";
    }
    
    leaf ipv4-ihl {
      type uint8 {
         range 0..15;
      }
      description "Internet Header Length in 32 bit words 
                   (see RFC791). Note that while the minimum 
                   value for this field in a packet is 5, 
                   we leave open the possibility here that 
                   the packet has been corrupted.";
    }
    
    leaf ipv4-id {
      type uint16;
      description "Identification as decribed in RFC791";
    }
    
    leaf ipv4-flags {
      type ipv4-flags-type;
      description "IPv4 flags as defined in RFC791";
    }
    
    leaf ipv4-offset {
      type uint16 {
         range 0..8191;
      }
      description "Matches on the packet fragment offset";
    }
   }
   
   augment "/ietf-acl:access-lists/ietf-acl:acl/" +
           "ietf-acl:access-list-entries/ietf-acl:ace/" +
           "ietf-acl:matches" {
    description "Newco proprietary simple filter matches";
    choice protocol-payload-choice {
      description "Newo proprietary payload match condition";
      list protocol-payload {
        key value-keyword;
        ordered-by user;
        description "Match protocol payload";
        uses match-simple-payload-protocol-value;
      }
    }

    choice metadata {
      description "Newco proprietary interface match condition";
      list interface-name {
        key input-interface;
        ordered-by user;
        description "Match interface name";
        uses metadata;  
      }
    }
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:access-list-entries/ietf-acl:ace/" +
          "ietf-acl:actions" {
    description "Newco proprietary simple filter actions";
    choice action {
      description "";
      case count {
        description "Count the packet in the named counter";
        leaf count {
          type string;
          description "";
        }
      }
      case policer {
        description "Name of policer to use to rate-limit traffic";
        leaf policer {
          type string;
          description "";
        }
      }
      case hiearchical-policer {
        description "Name of hierarchical policer to use to
        rate-limit traffic";
        leaf hierarchitacl-policer{
          type string;
          description "";
        }
      }
    }
  }

  augment "/ietf-acl:access-lists/ietf-acl:acl" {
    description "Newco proprietary default action";
    container default-actions {
      description 
        "Actions that occur if no access-list entry is matched.";
      leaf deny {
        type empty;
        description "";
      }
    }
  }

  grouping metadata {
    description
    "Fields associated with a packet which are not in
    the header.";
    leaf input-interface {
      type ietf-if:interface-ref {
        require-instance false;
      }
      description
        "Packet was received on this interface";
    }
  }	
      
  grouping match-simple-payload-protocol-value {
    description "Newco proprietary payload";
    leaf value-keyword {
      type enumeration {
        enum icmp {
          description "Internet Control Message Protocol";
        }
        enum icmp6 {
          description "Internet Control Message Protocol Version 6";
        }
        enum range {
          description "Range of values";
        }
      }

      description "(null)";
    }
  }
    
  augment "/ietf-if:interfaces/ietf-if:interface" {
    description "Apply ACL to interfaces";
    container acl{
      description "ACL related properties.";
      leaf acl-name {
        type ietf-acl:access-control-list-ref;
        description "Access Control List name.";
      }
      leaf match-counter {
        type yang:counter64;
        config false;
        description 
          "Total match count for Access Control 
          List on this interface";
      }
      choice direction {
        description "Applying ACL in which traffic direction";
        leaf in {
	  type empty;
	  description "Inbound traffic";
	}
        leaf out {
	  type empty;
	  description "Outbound traffic";
	}
      }
    }
  }
    
  augment "/ietf-acl:access-lists/ietf-acl:acl/" +
          "ietf-acl:acl-oper-data" {
    description 
      "This is an example on how to apply acl to a target to collect
       operational data";
    container targets {
      description "To which object is the ACL attached to";
      choice interface {
        description 
          "Access Control List was attached to this interface";  
        leaf-list interface-name{
          type ietf-if:interface-ref {
          require-instance true;
        }
        description "Attached to this interface name";
      }
    }
  }
}
          ]]></artwork>
        </figure>

        <t>Draft authors expect that different vendors will provide their own
        yang models as in the example above, which is the augmentation of the
        base model</t>
      </section>

      <!--newcoacl-->

      <!--mixedtypeacl-->

      <section anchor="mixedtypeacl"
               title="Example to augment model with mixed ACL type">
        <t>As vendors (or IETF) add more features to ACL, the model is easily
        augmented. One of such augmentations can be to add support for mixed
        type of ACLs, where acl-type-base can be augmented like in example
        below:</t>

        <figure>
          <artwork><![CDATA[
	    identity mixed-l3-acl {
	      base "access-control-list:acl-type-base";
	      description "ACL that contains a mix of entries that
	      primarily match on fields in IPv4 headers and entries
	      that primarily match on fields in IPv6 headers.
       Matching on layer 4 header fields may also exist in the
	      list. An acl of type mixed-l3-acl does not contain
	      matches on fields in the ethernet header.";
	    }
	    
	    identity mixed-l2-l3-acl {
	      base "access-control-list:acl-type-base";
	      description "ACL that contains a mix of entries that
	      primarily match on fields in ethernet headers, entries
	      that primarily match on fields in IPv4 headers, 
       and entries that primarily match on fields in IPv6 
       headers. Matching on layer 4 header fields may also 
       exist in the list.";
	    }	  
	    
	  ]]></artwork>
        </figure>
      </section>

      <section title="Linux nftables">
        <t>As Linux platform is becoming more popular as networking platform,
        the Linux data model is changing. Previously ACLs in Linux were highly
        protocol specific and different utilities were used (iptables,
        ip6tables, arptables, ebtables), so each one had separate data model.
        Recently, this has changed and a single utility, nftables, has been
        developed. With a single application, it has a single data model for
        filewall filters and it follows very similarly to the
        ietf-access-control list module proposed in this draft. The nftables
        support input and output ACEs and each ACE can be defined with match
        and action.</t>

        <t>The example in <xref target="example"/> can be configured using
        nftable tool as below.</t>

        <figure>
          <artwork><![CDATA[
      nft add table ip filter
      nft add chain filter input
      nft add rule ip filter input ip protocol tcp ip saddr \
          10.10.10.1/24 drop
      ]]></artwork>
        </figure>

        <t>The configuration entries added in nftable would be.</t>

        <figure>
          <artwork><![CDATA[
      table ip filter {
        chain input {
          ip protocol tcp ip saddr 10.10.10.1/24 drop 
        }
      }

    ]]></artwork>
        </figure>

        <t>We can see that there are many similarities between Linux nftables
        and IETF ACL YANG data models and its extension models. It should be
        fairly easy to do translation between ACL YANG model described in this
        draft and Linux nftables.</t>

        <t/>
      </section>
    </section>
  </back>
</rfc>
